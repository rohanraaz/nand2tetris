/*
* Wallace tree signed multiplier circuit
* gives the product and overflow of signed operands x[8] and y[8]
* using CSA based 3 to 2 reducers
* followed by CLA with high propagate and generate terms
*/

CHIP wallacetreesigned{
    IN x[8],y[8];
    OUT out[8],of;
    
    PARTS:
    //generating partial products pp0, pp1, pp2, pp3, pp4, pp5, pp6, pp7 pp8
    ppgenerator(x=x,y=y,pp0=pp0,pp1=pp1,pp2=pp2,pp3=pp3,pp4=pp4,pp5=pp5,pp6=pp6,pp7=pp7,pp8=pp8);
    //current summands-> pp0, pp1, pp2, pp3, pp4, pp5, pp6, pp7 pp8

    //level 1
    reducer(x=pp0, y=pp1, z=pp2, s=s10, c=c10);
    reducer(x=pp3, y=pp4, z=pp5, s=s11, c=c11);
    //current summands-> c10 s10 s11 c11 pp6 pp7 pp8

    //level 2
    reducer(x=s10, y=c10, z=s11, s=s20, c=c20);
    reducer(x=c11, y=pp6, z=pp7, s=s21, c=c21);
    //current summands-> c20 s20 c21 s21 pp8

    //level 3
    reducer(x=s20, y=c20, z=c21, s=s30, c=c30);
    //current summands-> c30 s30 s21 pp8

    //level 4
    reducer(x=c30, y=s30, z=s21, s=s40, c=c40);
    //current summands-> c40 s40 pp8

    //level 5
    reducer(x=c40, y=s40, z=pp8, s=s50, c=c50);
    //current summands-> c50 s50 pp8

    // using 16 bit adder to add c50 and s50 and intial carry to the adder is 0
    adder16(x=c50, Y=s50, s=false, S=P);
    adder16(x=c50, Y=s50, s=false, S[0..7]=out[0..7]);

    //overflow condition using OF gate (OF.hdl)
    /*of = (x[7] xnor y[7]).(P[7]+P[8]+P[9]+P[10]+P[11]+P[12]+P[13]+P[14]+P[15]) + 
          (x[7] XOR y[7]).(P'[7]+P'[8]+P'[9]+P'[10]+P'[11]+P'[12]+P'[13]+P'[14]+P'[15])
    */
    OF(x=x[7],y=y[7],p=P, OF=of);
    
}