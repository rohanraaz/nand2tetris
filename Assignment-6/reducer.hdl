/*
    16 bit 3 to 2 reducer
    this chip takes 3 partial products, adds the corresponding bits in each ppi and returns sum(s) and carry(c) busses
    all 16 additions are done in parallel
*/

CHIP reducer{
    IN x[16],y[16],z[16];
    OUT s[16],c[16];

    PARTS:
    Not(in=true,out=c[0]);
    fulladd(x=x[0],y=y[0],c=z[0],sum=s[0],carry=c[1]);
    fulladd(x=x[1],y=y[1],c=z[1],sum=s[1],carry=c[2]);
    fulladd(x=x[2],y=y[2],c=z[2],sum=s[2],carry=c[3]);
    fulladd(x=x[3],y=y[3],c=z[3],sum=s[3],carry=c[4]);
    fulladd(x=x[4],y=y[4],c=z[4],sum=s[4],carry=c[5]);
    fulladd(x=x[5],y=y[5],c=z[5],sum=s[5],carry=c[6]);
    fulladd(x=x[6],y=y[6],c=z[6],sum=s[6],carry=c[7]);
    fulladd(x=x[7],y=y[7],c=z[7],sum=s[7],carry=c[8]);
    fulladd(x=x[8],y=y[8],c=z[8],sum=s[8],carry=c[9]);
    fulladd(x=x[9],y=y[9],c=z[9],sum=s[9],carry=c[10]);
    fulladd(x=x[10],y=y[10],c=z[10],sum=s[10],carry=c[11]);
    fulladd(x=x[11],y=y[11],c=z[11],sum=s[11],carry=c[12]);
    fulladd(x=x[12],y=y[12],c=z[12],sum=s[12],carry=c[13]);
    fulladd(x=x[13],y=y[13],c=z[13],sum=s[13],carry=c[14]);
    fulladd(x=x[14],y=y[14],c=z[14],sum=s[14],carry=c[15]);
    fulladd(x=x[15],y=y[15],c=z[15],sum=s[15],carry=cc);
}
