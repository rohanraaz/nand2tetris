/**4 bit adder/subtractor without using high level propagate and generate terms
as-> addion or subtraction (1 for subtraction else 0)
*/

CHIP add4{
    IN a[4],b[4],as,c0;
    OUT s[4],c4,c3;

    PARTS:
    Xor(a=b[0], b=as, out=b0);
    Xor(a=b[1], b=as, out=b1);
    Xor(a=b[2], b=as, out=b2);
    Xor(a=b[3], b=as, out=b3);
    
    Xor(a=a[0], b=b0, out=p0);
    Xor(a=a[1], b=b1, out=p1);
    Xor(a=a[2], b=b2, out=p2);
    Xor(a=a[3], b=b3, out=p3);
    
    And(a=a[0], b=b0, out=G0);
    And(a=a[1], b=b1, out=G1);
    And(a=a[2], b=b2, out=G2);
    And(a=a[3], b=b3, out=G3);

    And(a=c0, b=p0, out=t01);//t01=p0.c0
    And(a=t01, b=p1, out=t02);//t02=c0.p0.p1
    And(a=t02, b=p2, out=t03);//t03=c0.p0.p1.p2
    And(a=t03, b=p3, out=t04);//t04=c0.p0.p1.p2.p3

    And(a=p1, b=G0, out=t12);//t12=p1.G0
    And(a=t12, b=p2, out=t13);//t13=p2.p1.G0
    And(a=t13, b=p3, out=t14);//t14=p3.p2.p1.G0

    And(a=p2, b=G1, out=t23);//t23=p2.G1
    And(a=t23, b=p3, out=t24);//t24=p3.p2.G1

    And(a=p3, b=G2, out=t34);//t34=p3.G2
    
    Or(a=t01, b=G0, out=c1);//c1=t01+G1
    Or(a=t02, b=t12, out=cc2);//cc2=t02+t12
    Or(a=cc2, b=G1, out=c2);//c2=t02+t12+G1

    Or(a=t03, b=t13, out=cc3);//cc3=t03+t13
    Or(a=cc3, b=t23, out=ccc3);//ccc3=t03+t13+t23
    Or(a=ccc3, b=G2, out=c3);//c3=t03+t13+t23+G2
    Or(a=ccc3, b=G2, out=c);//c=t03+t13+t23+G2
    Or(a=t04, b=t14, out=c14);//c14=t04+t14
    Or(a=c14, b=t24, out=c24);//c24=t04+t14+t24
    Or(a=c24, b=t34, out=c34);//c34=t04+t14+t24+t34
    Or(a=c34, b=G3, out=c4);//c4=t04+t14+t24+t34+G3

    Xor(a=p0, b=c0, out=s[0]);
    Xor(a=p1, b=c1, out=s[1]);
    Xor(a=p2, b=c2, out=s[2]);
    Xor(a=p3, b=c , out=s[3]);
    
}